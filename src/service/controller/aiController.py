from typing import Optional

import pygame

from service.controller.controller import Controller
from AI.ai import AI
from model.mainMenu import MainMenu
from model.level import Level
from view.viewMainMenu import ViewMainMenu
from view.viewGame import ViewGame
from settings import *


class AIController(Controller):
    """
    This class is a controller for managing the AI gameplay within a game.

    Attributes:
    ----------
        ai_moves: A list of moves generated by the AI algorithm.
        curr_move: The current move in the ai_moves list.
    """

    def __init__(self, state, view):
        """
        Initializes the AIController.
        :param state: The state of the game.
        :param view: The game's view.
        """
        super().__init__(state, view)

        assert isinstance(self.view, ViewGame), "view must be an instance of ViewGame"

        self.view.draw_waiting_for_ai()
        ai = AI(state, state.ai_algorithm, state.heuristic)
        self.ai_moves = ai.moves
        state.time = ai.state.time
        self.curr_move = 0
        pygame.time.set_timer(TIMER_EVENT, WAITING_TIME)

    def handle_event(self) -> Optional[Command]:
        """
        Handles events during the AI gameplay.
        :return: Optional[Command]
        """
        if pygame.event.peek(TIMER_EVENT) and self.curr_move < len(self.ai_moves):
            pygame.event.clear(TIMER_EVENT)
            self.process_move(self.ai_moves[self.curr_move])
            self.curr_move += 1

        return super().handle_event()

    def process_move(self, move: str, opposite=False) -> None:
        """
        Processes a given move by the AI.
        :param move: The move to be processed.
        :param opposite: Flag indicating if the move should be mirrored.
        :return: None
        """
        assert isinstance(self.state, Level), "state must be an instance of Level"

        direction = move.split()[0]
        index = int(move.split()[1])

        self.state.increment_score()
        opposite_weight = -1 if opposite else 1
        if direction == "right":
            self.state.move_row(index, opposite_weight * 1, False)
        elif direction == "left":
            self.state.move_row(index, opposite_weight * -1, False)
        elif direction == "up":
            self.state.move_col(index, opposite_weight * -1, False)
        elif direction == "down":
            self.state.move_col(index, opposite_weight * 1, False)

    def handle_pressed_button(self, button):
        """
        Handles actions triggered by button presses during AI gameplay.
        :param button: The pressed button.
        :return: Optional[Command]
        """
        assert isinstance(self.state, Level), "state must be an instance of Level"

        action = button.get_action()

        if action == "Quit":
            if not self.state.is_paused:
                pygame.time.set_timer(TIMER_EVENT, 0)
            self.state = MainMenu()
            self.view = ViewMainMenu(self.view.get_screen())
            return Command.CHANGE_MAIN
        elif action == "Next_left":
            if not self.state.is_paused:
                self.pause()
            if self.curr_move > 0:
                self.curr_move -= 1
                self.process_move(self.ai_moves[self.curr_move], True)
                self.state.score -= 2
        elif action == "Next_right":
            if not self.state.is_paused:
                self.pause()
            if self.curr_move < len(self.ai_moves):
                self.process_move(self.ai_moves[self.curr_move])
                self.curr_move += 1
        elif action == "Resume":
            if self.state.is_paused:
                self.unpause()
        elif action == "Pause":
            if not self.state.is_paused:
                self.pause()

        return None

    def pause(self):
        """
        Pauses the AI gameplay.
        """
        assert isinstance(self.state, Level), "state must be an instance of Level"

        pygame.time.set_timer(TIMER_EVENT, 0)
        pygame.event.clear(TIMER_EVENT)
        self.state.pause()

    def unpause(self):
        """
        Resumes the AI gameplay.
        """
        assert isinstance(self.state, Level), "state must be an instance of Level"

        pygame.time.set_timer(TIMER_EVENT, WAITING_TIME)
        self.state.unpause()
